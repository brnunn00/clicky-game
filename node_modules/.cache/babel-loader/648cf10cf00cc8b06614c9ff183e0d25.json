{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\br_nu\\\\Documents\\\\clicky-game\\\\src\\\\pages\\\\Main.js\";\nimport React, { Component } from \"react\";\nimport Card from \"../components/Card\";\nimport Jumbotron from \"../components/Jumbotron\"; // import Header from \"../components/Header\";\n\nimport images from \"../images.json\";\nimport Navbar from \"../components/Navbar\";\nimport \"./style.css\";\nimport \"./animate.css\";\nimport { Col, Row, CardContainer, Container } from \"../components/Grid\"; // import { List, Row, Container } from \"../components/Grid\";\n\nclass Game extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      clickedCards: [],\n      images,\n      imageIds: [],\n      bestScore: 0,\n      currentScore: 0,\n      gameMessage: \"Click an image to begin\",\n      gameMessageClass: \"\"\n    };\n\n    this.shuffleMe = anything => {\n      anything.sort(function (a, b) {\n        return 0.5 - Math.random();\n      });\n      return anything;\n    };\n\n    this.checkGuess = guessId => {\n      let clickArray = this.state.clickedCards;\n      let bestScore = this.state.bestScore;\n      let newScore = this.state.currentScore;\n      let imageArr = this.state.images;\n      newScore++;\n\n      if (newScore > bestScore) {\n        bestScore = newScore;\n      }\n\n      if (clickArray.indexOf(guessId) > -1) {\n        this.gameOver();\n      } else if (bestScore == imageArr.length) {\n        this.youWin();\n      } else {\n        clickArray.push(guessId);\n        let newArr = this.shuffleMe(this.state.images);\n        this.setState({\n          gameMessageClass: \"correct\",\n          bestScore: bestScore,\n          currentScore: newScore,\n          clickedCards: clickArray,\n          images: newArr,\n          gameMessage: \"Correct! Keep going but don't pick an image you've already picked!\"\n        });\n      }\n    };\n\n    this.gameOver = () => {\n      let newArr = this.shuffleMe(this.state.images);\n      this.setState({\n        gameMessageClass: \"wrong\",\n        currentScore: 0,\n        clickedCards: [],\n        images: newArr,\n        gameMessage: \"Aww you lost. Game Over! Keep going until you get all 12, unless you're a chicken\"\n      });\n    };\n\n    this.youWin = () => {\n      let newArr = this.shuffleMe(this.state.images);\n      this.setState({\n        currentScore: 0,\n        clickedCards: [],\n        images: newArr,\n        gameMessage: \"Good job you won. Now can you do it again without cheating?\"\n      });\n    };\n  }\n\n  componentDidMount() {\n    let arr = this.shuffleMe(this.state.images);\n    this.setState({\n      images: arr\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      className: \"ml-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Current Score: \", this.state.currentScore, \" | Best Score: \", this.state.bestScore, \" \")), React.createElement(Jumbotron, {\n      message: this.state.gameMessage,\n      classState: this.state.gameMessageClass,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, this.state.images.map(image => React.createElement(\"div\", {\n      class: \"animate fadeInLeft\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(Card, {\n      checkGuess: this.checkGuess,\n      id: image.id,\n      key: image.id,\n      name: image.name,\n      image: image.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["C:\\Users\\br_nu\\Documents\\clicky-game\\src\\pages\\Main.js"],"names":["React","Component","Card","Jumbotron","images","Navbar","Col","Row","CardContainer","Container","Game","state","clickedCards","imageIds","bestScore","currentScore","gameMessage","gameMessageClass","shuffleMe","anything","sort","a","b","Math","random","checkGuess","guessId","clickArray","newScore","imageArr","indexOf","gameOver","length","youWin","push","newArr","setState","componentDidMount","arr","render","map","image","id","name"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Card from \"../components/Card\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\n// import Header from \"../components/Header\";\r\nimport images from \"../images.json\";\r\nimport Navbar from \"../components/Navbar\"\r\nimport \"./style.css\";\r\nimport \"./animate.css\";\r\n\r\nimport { Col, Row, CardContainer,Container } from \"../components/Grid\";\r\n// import { List, Row, Container } from \"../components/Grid\";\r\nclass Game extends Component {\r\n    state = {\r\n        clickedCards: [],\r\n        images,\r\n        imageIds: [],\r\n        bestScore: 0,\r\n        currentScore: 0,\r\n        gameMessage: \"Click an image to begin\",\r\n        gameMessageClass:\"\"\r\n\r\n    };\r\n\r\n    componentDidMount() {\r\n        let arr = this.shuffleMe(this.state.images);\r\n        this.setState({images:arr})\r\n    }\r\n\r\n    shuffleMe = anything => {\r\n        anything.sort(function(a, b) {  \r\n            return 0.5 - Math.random()\r\n        })\r\nreturn anything;\r\n    }\r\n\r\n    checkGuess = guessId => {\r\n      let clickArray = this.state.clickedCards;\r\n      let bestScore = this.state.bestScore;\r\n      let newScore = this.state.currentScore;\r\n      let imageArr = this.state.images;\r\n      newScore++;\r\n      if (newScore > bestScore){\r\n          bestScore = newScore;\r\n      }\r\n      if (clickArray.indexOf(guessId) > -1){\r\n          \r\n          this.gameOver();\r\n      } else if(bestScore == imageArr.length ){\r\nthis.youWin();\r\n      } else {\r\n          clickArray.push(guessId);\r\n         \r\n          let newArr = this.shuffleMe(this.state.images);\r\n          this.setState({gameMessageClass: \"correct\",bestScore: bestScore, currentScore:newScore, clickedCards: clickArray, images:newArr\r\n        , gameMessage: \"Correct! Keep going but don't pick an image you've already picked!\"})\r\n      }\r\n    }\r\n\r\n    gameOver = () => {\r\n        let newArr = this.shuffleMe(this.state.images);\r\n\r\n        this.setState({gameMessageClass: \"wrong\",currentScore:0,clickedCards:[], images:newArr, gameMessage: \"Aww you lost. Game Over! Keep going until you get all 12, unless you're a chicken\"})\r\n    }\r\n    youWin = () => {\r\n        let newArr = this.shuffleMe(this.state.images);\r\n        this.setState({currentScore:0,clickedCards:[], images:newArr, gameMessage: \"Good job you won. Now can you do it again without cheating?\"})\r\n    }\r\n    render() {\r\n        return (\r\n          <div>\r\n                <Navbar>\r\n                    \r\n                    <li className=\"ml-auto\">Current Score: {this.state.currentScore} |\r\n                  Best Score: {this.state.bestScore} </li>\r\n                </Navbar>\r\n                <Jumbotron message={this.state.gameMessage} classState ={this.state.gameMessageClass}/>\r\n                <Container>\r\n                {/* <Col size=\"md-12\"> \r\n            <CardContainer> */}\r\n                {this.state.images.map(image => (\r\n                    <div class=\"animate fadeInLeft\">\r\n                    <Card\r\n                        checkGuess={this.checkGuess}\r\n                        id={image.id}\r\n                        key={image.id}\r\n                        name={image.name}\r\n                        image={image.image}\r\n                    />\r\n                    </div>\r\n                ))}\r\n            {/* </CardContainer>\r\n            </Col> */}\r\n            </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;"]},"metadata":{},"sourceType":"module"}