{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\br_nu\\\\Documents\\\\clicky-game\\\\clicky-game\\\\src\\\\pages\\\\Main.js\";\nimport React, { Component } from \"react\";\nimport Card from \"../components/Card\";\nimport Jumbotron from \"../components/Jumbotron\"; // import Header from \"../components/Header\";\n\nimport images from \"../images.json\";\nimport Navbar from \"../components/Navbar\";\nimport { Col, Row, CardContainer, Container } from \"../components/Grid\"; // import { List, Row, Container } from \"../components/Grid\";\n\nclass Game extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      clickedCards: [],\n      images,\n      imageIds: [],\n      bestScore: 0,\n      currentScore: 0,\n      gameMessage: \"Click an image to begin\"\n    };\n\n    this.shuffleMe = anything => {\n      return;\n    };\n\n    this.checkGuess = guessId => {\n      let clickArray = this.state.clickedCards;\n      let bestScore = this.state.bestScore;\n      let newScore = this.state.currentScore;\n      newScore++;\n\n      if (newScore > bestScore) {\n        bestScore = newScore;\n      }\n\n      if (clickArray.indexOf(guessId) > -1) {\n        this.gameOver();\n      } else {\n        clickArray.push(guessId);\n        this.setState({\n          bestScore: bestScore,\n          currentScore: newScore,\n          clickedCards: clickArray\n        });\n      }\n    };\n\n    this.gameOver = () => {\n      alert(\"dang\");\n    };\n  }\n\n  componentDidMount() {\n    let arr = this.shuffleMe(this.state.images);\n    this.setState({\n      images: arr\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, this.state.gameMessage), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Current Score: \", this.state.currentScore, \" | Best Score: \", this.state.bestScore, \" \")), React.createElement(Jumbotron, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \" CLICK EM IF YOU GOT EM\")), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Col, {\n      size: \"md-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(CardContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, this.state.images.map(image => React.createElement(Card, {\n      checkGuess: this.checkGuess,\n      id: image.id,\n      key: image.id,\n      name: image.name,\n      image: image.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["C:\\Users\\br_nu\\Documents\\clicky-game\\clicky-game\\src\\pages\\Main.js"],"names":["React","Component","Card","Jumbotron","images","Navbar","Col","Row","CardContainer","Container","Game","state","clickedCards","imageIds","bestScore","currentScore","gameMessage","shuffleMe","anything","checkGuess","guessId","clickArray","newScore","indexOf","gameOver","push","setState","alert","componentDidMount","arr","render","map","image","id","name"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Card from \"../components/Card\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\n// import Header from \"../components/Header\";\r\nimport images from \"../images.json\";\r\nimport Navbar from \"../components/Navbar\"\r\n\r\nimport { Col, Row, CardContainer,Container } from \"../components/Grid\";\r\n// import { List, Row, Container } from \"../components/Grid\";\r\nclass Game extends Component {\r\n    state = {\r\n        clickedCards: [],\r\n        images,\r\n        imageIds: [],\r\n        bestScore: 0,\r\n        currentScore: 0,\r\n        gameMessage: \"Click an image to begin\"\r\n\r\n    };\r\n\r\n    componentDidMount() {\r\n        let arr = this.shuffleMe(this.state.images);\r\n        this.setState({images:arr})\r\n    }\r\n\r\n    shuffleMe = anything => {\r\nreturn;\r\n    }\r\n\r\n    checkGuess = guessId => {\r\n      let clickArray = this.state.clickedCards;\r\n      let bestScore = this.state.bestScore;\r\n      let newScore = this.state.currentScore;\r\n      newScore++;\r\n      if (newScore > bestScore){\r\n          bestScore = newScore;\r\n      }\r\n      if (clickArray.indexOf(guessId) > -1){\r\n          this.gameOver();\r\n      } else {\r\n          clickArray.push(guessId);\r\n          this.setState({bestScore: bestScore, currentScore:newScore, clickedCards: clickArray})\r\n      }\r\n    }\r\n\r\n    gameOver = () => {\r\n        alert(\"dang\");\r\n    }\r\n    render() {\r\n        return (\r\n          <div>\r\n                <Navbar>\r\n                    <li>{this.state.gameMessage}</li>\r\n                    <li>Current Score: {this.state.currentScore} |\r\n                  Best Score: {this.state.bestScore} </li>\r\n                </Navbar>\r\n                <Jumbotron><h2> CLICK EM IF YOU GOT EM</h2></Jumbotron>\r\n                <Container>\r\n                <Col size=\"md-12\"> \r\n            <CardContainer>\r\n                {this.state.images.map(image => (\r\n                    <Card\r\n                        checkGuess={this.checkGuess}\r\n                        id={image.id}\r\n                        key={image.id}\r\n                        name={image.name}\r\n                        image={image.image}\r\n                    />\r\n                ))}\r\n            </CardContainer>\r\n            </Col>\r\n            </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;"]},"metadata":{},"sourceType":"module"}